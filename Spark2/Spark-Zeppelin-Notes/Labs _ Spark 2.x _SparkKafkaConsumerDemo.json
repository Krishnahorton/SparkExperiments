{"paragraphs":[{"title":"Add dependencies","text":"%spark2.dep\nz.reset()\nz.load(\"org.apache.spark:spark-streaming-kafka-0-10_2.11:2.3.1\")\nz.load(\"/usr/hdp/current/kafka-broker/libs/kafka-clients-1.1.1.3.0.1.0-187.jar\")\n","user":"spark","dateUpdated":"2019-01-09T08:55:58+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":{},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@224c1c28\n"}]},"apps":[],"jobName":"paragraph_1547015824460_-1970891396","id":"20180928-071305_750869571","dateCreated":"2019-01-09T06:37:04+0000","dateStarted":"2019-01-09T08:55:58+0000","dateFinished":"2019-01-09T08:56:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:351"},{"title":"Initialise StreamingContext","text":"%spark2\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010._\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\n\nval topic = \"devicesignal\"\nval brokers = \"c220-node4.squadron-labs.com:6667\"\n\nval kafkaParams = Map[String, Object](\n    \"bootstrap.servers\" -> brokers,\n    \"key.deserializer\" -> classOf[StringDeserializer],\n    \"value.deserializer\" -> classOf[StringDeserializer],\n    \"group.id\" -> \"StreamTestGroup\",\n    \"auto.offset.reset\" -> \"latest\",\n    \"enable.auto.commit\" -> (false: java.lang.Boolean)\n  )\n  \n  val topics = Array(topic)\n  val streamingContext = new StreamingContext(sc, Seconds(30)) \n  \n  val stream = KafkaUtils.createDirectStream[String, String](\n  streamingContext,\n  PreferConsistent,\n  Subscribe[String, String](topics, kafkaParams))\n  \n  val schemaString = \"device_id,temperature,timestamp\"\n  import org.apache.spark.sql.types._\n  val tableSchema = StructType( schemaString.split(\",\").map(fieldName => StructField(fieldName, StringType, true)))\n  \n  stream.foreachRDD { (rdd: org.apache.spark.rdd.RDD[org.apache.kafka.clients.consumer.ConsumerRecord[String,String]], time: org.apache.spark.streaming.Time) =>\n  val rowRDD = rdd.map(r => org.apache.spark.sql.Row.fromSeq(new String(r.value).split(\":\")))\n  val wordsDF = sqlContext.createDataFrame(rowRDD,tableSchema)\n  wordsDF.registerTempTable(\"realTimeTable\")\n  \n    val offsetRanges = rdd.asInstanceOf[HasOffsetRanges].offsetRanges\n    stream.asInstanceOf[CanCommitOffsets].commitAsync(offsetRanges)\n  }\n\n","user":"spark","dateUpdated":"2019-01-09T08:56:16+0000","config":{"tableHide":false,"editorSetting":{"editOnDblClick":false,"language":"scala","completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport org.apache.spark.streaming.kafka010._\nimport org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent\nimport org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe\ntopic: String = devicesignal\nbrokers: String = c220-node4.squadron-labs.com:6667\nkafkaParams: scala.collection.immutable.Map[String,Object] = Map(key.deserializer -> class org.apache.kafka.common.serialization.StringDeserializer, auto.offset.reset -> latest, group.id -> StreamTestGroup, bootstrap.servers -> c220-node4.squadron-labs.com:6667, enable.auto.commit -> false, value.deserializer -> class org.apache.kafka.common.serialization.StringDeserializer)\ntopics: Array[St..."}]},"apps":[],"jobName":"paragraph_1547015824469_374072183","id":"20160331-233830_541232082","dateCreated":"2019-01-09T06:37:04+0000","dateStarted":"2019-01-09T08:56:16+0000","dateFinished":"2019-01-09T08:56:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:352"},{"title":"Start the Streaming context","text":"%spark2\n\n  // Start the context\n  streamingContext.start()\n","user":"spark","dateUpdated":"2019-01-09T08:58:04+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"results":{},"enabled":true,"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1547015824471_-717267580","id":"20180928-100621_1081082753","dateCreated":"2019-01-09T06:37:04+0000","dateStarted":"2019-01-09T08:58:04+0000","dateFinished":"2019-01-09T08:58:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:353"},{"title":"View the data","text":"%sql\nselect device_id, avg(temperature) max_temp from realTimeTable group by device_id, 'timestamp' order by 'timestamp'\n","user":"spark","dateUpdated":"2019-01-09T09:03:37+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","editorHide":false,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"device_id","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"max_temp","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true,"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"device_id\tmax_temp\n101\t51.78665318503539\n112\t52.5678776290631\n113\t50.12983151635282\n107\t52.89733464955577\n110\t51.69880715705765\n100\t51.52917093142272\n118\t49.4745417515275\n104\t50.965753424657535\n102\t47.98761609907121\n111\t47.33594515181195\n103\t49.998029556650245\n115\t49.977756286266924\n108\t48.47525676937442\n117\t49.74974567650051\n114\t49.991878172588834\n106\t46.66497461928934\n116\t51.375394321766564\n105\t50.26652675760756\n109\t46.586\n119\t48.81294236602629\n"},{"type":"TEXT","data":""}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://c220-node4.squadron-labs.com:4040/jobs/job?id=1","http://c220-node4.squadron-labs.com:4040/jobs/job?id=2","http://c220-node4.squadron-labs.com:4040/jobs/job?id=3","http://c220-node4.squadron-labs.com:4040/jobs/job?id=4","http://c220-node4.squadron-labs.com:4040/jobs/job?id=5"],"interpreterSettingId":"spark2"}},"apps":[],"jobName":"paragraph_1547015824472_-357573608","id":"20180928-103708_649998107","dateCreated":"2019-01-09T06:37:04+0000","dateStarted":"2019-01-09T08:59:06+0000","dateFinished":"2019-01-09T08:59:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:354"},{"title":"Stop after use","text":"%spark2\nstreamingContext.stop(stopSparkContext=false, stopGracefully=true)\n","user":"spark","dateUpdated":"2019-01-09T07:26:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"fontSize":9,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1547015824472_-1697735678","id":"20180928-102211_1204937749","dateCreated":"2019-01-09T06:37:04+0000","dateStarted":"2019-01-09T07:26:15+0000","dateFinished":"2019-01-09T07:30:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:355"},{"text":"","user":"spark","dateUpdated":"2019-01-09T06:37:04+0000","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"fontSize":9},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1547015824473_-178849639","id":"20161018-144007_1720066531","dateCreated":"2019-01-09T06:37:04+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:356"}],"name":"SparkKafkaConsumerDemo","id":"2DZFM9TPK","noteParams":{},"noteForms":{},"angularObjects":{"spark2:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}